<?php

namespace App\Services;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Throwable;

class TelegramNotifier
{
    protected string $token;
    protected string $chatId;
    protected bool $isEnabled;
    protected array $throttledErrors = [];
    protected int $throttleTime = 60; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞

    public function __construct()
    {
        $this->token = env('TELEGRAM_BOT_TOKEN', '8161282478:AAGB8PSzNjM9mmGTl8fi9L-y0PiQ6xxf0lw');
        $this->chatId = env('TELEGRAM_CHAT_ID', '-4810796860');
        // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $this->isEnabled = env('TELEGRAM_NOTIFICATIONS_ENABLED', true) && env('APP_ENV') !== 'local';
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
     * 
     * @param Throwable $exception –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
     * @param Request|null $request –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
     * @return bool –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public function sendErrorNotification(Throwable $exception, ?Request $request = null): bool
    {
        if (!$this->isEnabled) {
            return false;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –æ—à–∏–±–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
        $errorKey = md5($exception->getMessage() . $exception->getFile() . $exception->getLine());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –ª–∏ —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ
        if ($this->isThrottled($errorKey)) {
            Log::info('Telegram notification throttled for error: ' . $errorKey);
            return false;
        }
        
        $message = $this->formatErrorMessage($exception, $request);
        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     * 
     * @param string $message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return bool –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public function sendMessage(string $message): bool
    {
        if (!$this->isEnabled || empty($this->token) || empty($this->chatId)) {
            return false;
        }

        try {
            $response = Http::post("https://api.telegram.org/bot{$this->token}/sendMessage", [
                'chat_id' => $this->chatId,
                'text' => $message,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true
            ]);

            return $response->successful();
        } catch (Throwable $e) {
            Log::error('Failed to send Telegram notification: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     * 
     * @param Throwable $exception –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
     * @param Request|null $request –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    protected function formatErrorMessage(Throwable $exception, ?Request $request): string
    {
        $message = "<b>üö® –û—à–∏–±–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ!</b>\n\n";
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        $message .= "<b>–¢–∏–ø:</b> " . get_class($exception) . "\n";
        $message .= "<b>–ö–æ–¥:</b> " . $exception->getCode() . "\n";
        $message .= "<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> " . $exception->getMessage() . "\n";
        $message .= "<b>–§–∞–π–ª:</b> " . $exception->getFile() . ":" . $exception->getLine() . "\n\n";
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        if ($request) {
            $message .= "<b>URL:</b> " . $request->fullUrl() . "\n";
            $message .= "<b>–ú–µ—Ç–æ–¥:</b> " . $request->method() . "\n";
            $message .= "<b>IP:</b> " . $request->ip() . "\n";
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if ($request->user()) {
                $message .= "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ID:" . $request->user()->id . 
                            " | " . $request->user()->email . 
                            " | –†–æ–ª—å: " . ($request->user()->role ?? 'N/A') . "\n";
            } else {
                $message .= "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> –ì–æ—Å—Ç—å\n";
            }
            
            $message .= "<b>User Agent:</b> " . $request->userAgent() . "\n";
            $message .= "<b>–†–µ—Ñ–µ—Ä–µ—Ä:</b> " . ($request->header('referer') ?? 'N/A') . "\n\n";
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            $message .= "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:</b>\n";
            $safeParams = $request->except(['password', 'password_confirmation', 'token']);
            $message .= !empty($safeParams) ? json_encode($safeParams, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT) : '–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤';
            $message .= "\n\n";
        }
        
        // –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
        $message .= "<b>Stack Trace (–∫—Ä–∞—Ç–∫–∏–π):</b>\n";
        $trace = $exception->getTraceAsString();
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç—Ä–µ–π—Å–∞, —Ç–∞–∫ –∫–∞–∫ Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if (strlen($trace) > 1000) {
            $trace = substr($trace, 0, 1000) . "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–∏–º–∏—Ç—É Telegram)";
        }
        $message .= "<pre>" . $trace . "</pre>\n";
        
        $message .= "\n<b>–í—Ä–µ–º—è:</b> " . now()->format('Y-m-d H:i:s');
        
        return $message;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
     * 
     * @return bool
     */
    protected function isLocalEnvironment(): bool
    {
        return env('APP_ENV') === 'local';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞ –æ—à–∏–±–∫–∏
     * 
     * @param string $errorKey –ö–ª—é—á –æ—à–∏–±–∫–∏
     * @return bool True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç—Ä–æ—Ç—Ç–ª–∏—Ç—Å—è (–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
     */
    protected function isThrottled(string $errorKey): bool
    {
        $currentTime = time();
        
        // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        foreach ($this->throttledErrors as $key => $time) {
            if ($currentTime - $time > $this->throttleTime) {
                unset($this->throttledErrors[$key]);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
        if (isset($this->throttledErrors[$errorKey])) {
            return true;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
        $this->throttledErrors[$errorKey] = $currentTime;
        return false;
    }
}
